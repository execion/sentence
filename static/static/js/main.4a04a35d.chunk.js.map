{"version":3,"sources":["game/redux/actions.js","game/redux/sentenceReducer.js","game/components/AudioButton.jsx","game/components/Button.jsx","game/components/ButtonList.jsx","game/components/Counter.jsx","game/components/Game.jsx","game/redux/gameReducer.js","game/components/Header.jsx","game/GameLayout.jsx","index.jsx"],"names":["types","typesGame","defaultState","loading","sentences","AudioButton","id","useState","audioPlay","setAudioPlay","Audio","audioPlayer","setAudioPlayer","useEffect","load","reload","time","duration","toString","replace","Number","setTimeout","className","onClick","play","pause","Button","letter","type","change","e","target","ButtonList","WordList","AlternateLetter","Types","map","item","Counter","countCorrect","countIncorrect","count","connect","gameState","sentenceState","question","answer","loaded","index","init","dispatch","insertSentence","sentence","payload","alternateLetter","length","console","log","answerCorrect","createSentenceList","state","action","tempSentence","split","tempList","i","push","uuidv4","shuffle","questionLetters","temp","filter","answerTemp","concat","questionTemp","join","answerLetters","Header","middleware","thunk","store","createStore","combineReducers","applyMiddleware","a","fetch","response","json","data","GameLayout","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iVAEaA,EACO,gBADPA,EAEO,gBAEPC,EACU,mBADVA,EAGD,SAHCA,EAIC,WCRRC,EAAe,CACjBC,SAAS,EACTC,UAAW,I,YC+BAC,G,MAjCK,SAAC,GAAU,IAATC,EAAQ,EAARA,GAAQ,EACUC,oBAAS,GADnB,mBAClBC,EADkB,KACPC,EADO,OAEcF,mBAAS,IAAIG,MAAJ,0CAA6CJ,KAFpE,mBAElBK,EAFkB,KAELC,EAFK,KAI1BC,qBAAU,WACND,EAAe,IAAIF,MAAJ,0CAA6CJ,KAC5DK,EAAYG,OACZL,GAAa,KAEd,CAACH,IAEJ,IAUMS,EAAS,WACX,IAAIC,EAAOL,EAAYM,SAASC,WAAWC,QAAQ,IAAI,IACvDC,OAAOJ,GACPK,YAAW,WACPZ,GAAa,KACdO,IAEP,OACI,wBAAQM,UAAU,cAAcC,QAAS,WAjBtCf,GACCG,EAAYa,OACZf,GAAa,GACbM,MAEAJ,EAAYc,QACZhB,GAAa,KAWjB,SAAyD,QChBlDiB,G,MAZA,SAAC,GAA4B,IAA3BC,EAA0B,EAA1BA,OAAQC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,OAC3B,OACI,wBACIP,UAAU,SACVhB,GAAIqB,EAAOrB,GACXiB,QAAU,SAAAO,GAAC,OAAID,EAAOC,EAAEC,OAAOzB,GAAIsB,IAHvC,SAKKD,EAAOA,WCaLK,EApBI,SAAC,GAAwC,IAAvCC,EAAsC,EAAtCA,SAAUC,EAA4B,EAA5BA,gBAAiBC,EAAW,EAAXA,MAC5C,OACI,mCAEQF,EAASG,KAAI,SAACC,GACN,OACI,cAAC,EAAD,CAEIV,OAAQU,EACRT,KAAMO,EACNN,OAAQK,GAHHG,EAAK/B,UCG3BgC,G,MAVC,SAAC,GAA2C,IAA1CC,EAAyC,EAAzCA,aAAcC,EAA2B,EAA3BA,eAAgBC,EAAW,EAAXA,MAC5C,OACI,sBAAKnB,UAAU,UAAf,UACI,0CAAaiB,KACb,4CAAeC,KACf,wCAAWC,UC2ERC,G,MAAAA,aA7BS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,UAAWC,EAAoB,EAApBA,cAClC,MAAO,CACHxC,UAAWwC,EAAcxC,UACzByC,SAAUF,EAAUE,SACpBC,OAAQH,EAAUG,OAClBC,OAAQJ,EAAUI,OAClBC,MAAOL,EAAUK,MACjBC,MAAOL,EAAczC,QACrBoC,aAAcI,EAAUJ,aACxBC,eAAgBG,EAAUH,eAC1BC,MAAOE,EAAUF,UAIE,SAACS,GACxB,MAAO,CACHC,eAAgB,SAACC,GAAD,OACZF,EAAS,CACLtB,KAAM3B,EACNoD,QAASD,KAEjBE,gBAAiB,SAAChD,EAAIsB,GAAL,OACbsB,EAAS,CACLtB,KAAMA,EACNyB,QAAS/C,QAKVoC,EA3EF,SAAC,GAYP,IAXHS,EAWE,EAXFA,eACAG,EAUE,EAVFA,gBACAP,EASE,EATFA,OACA3C,EAQE,EARFA,UACAyC,EAOE,EAPFA,SACAC,EAME,EANFA,OACAE,EAKE,EALFA,MACAC,EAIE,EAJFA,KACAV,EAGE,EAHFA,aACAE,EAEE,EAFFA,MACAD,EACE,EADFA,eAcA,OATA3B,qBAAU,WACFoC,IAEAE,EAAe/C,EAAU4C,EAAQ5C,EAAUmD,QAAQH,UACnDI,QAAQC,IAAIrD,EAAU4C,EAAQ5C,EAAUmD,QAAQH,aAGrD,CAACH,EAAM7C,EAAW4C,EAAOG,IAExBJ,EAGI,sBAAKzB,UAAU,YAAf,UACI,cAAC,EAAD,CAASmB,MAAOA,EAAOF,aAAcA,EAAcC,eAAgBA,IACnE,cAAC,EAAD,CAAalC,GAAIF,EAAU4C,EAAQ5C,EAAUmD,QAAQjD,KAErD,qBAAKgB,UAAU,SAAf,SACI,cAAC,EAAD,CAAYW,SAAUa,EAAQZ,gBAAiBoB,EAAiBnB,MAAOlC,MAG3E,qBAAKqB,UAAU,WAAf,SACI,cAAC,EAAD,CAAYW,SAAUY,EAAUX,gBAAiBoB,EAAiBnB,MAAOlC,SAK9E,kD,gBC7CTC,EAAe,CACjB6C,QAAQ,EACRC,MAAO,EACPH,SAAU,GACVC,OAAQ,GACRY,cAAe,GACfnB,aAAc,EACdC,eAAgB,EAChBC,MAAO,GAoBX,SAASkB,EAAmBC,EAAOC,GAE/B,IAFuC,EAEjCC,EAAeD,EAAOR,QAAQU,MAAM,KACtCC,EAAW,GAHwB,cAKzBF,GALyB,IAKvC,2BAA4B,CAAC,IAApBG,EAAmB,QACxBD,EAASE,KAAK,CACV5D,GAAI6D,cACJxC,OAAQsC,KARuB,8BAcvC,OAFAD,EAAWI,YAAQJ,GAEZ,2BACAJ,GADP,IAEIb,QAAQ,EACRF,SAAUmB,EACVN,cAAeG,EAAOR,UAI9B,SAASgB,EAAgBT,EAAOP,GAE5B,IAAIiB,EAAOV,EAAMf,SAAS0B,QAAO,SAAClC,GAAD,OAAUA,EAAK/B,KAAO+C,KACnDmB,EAAaZ,EAAMd,OAAO2B,OAAOH,GACjCI,EAAed,EAAMf,SAAS0B,QAAO,SAAClC,GAAD,OAAUA,EAAK/B,KAAO+C,KAE/D,OAA2B,IAAxBqB,EAAanB,QACZe,EAAOE,EAAWpC,KAAK,SAACC,GAAD,OAAUA,EAAKV,UAAQgD,KAAK,QACvCf,EAAMF,cACP,2BACAE,GADP,IAEIf,SAAU,GACVC,OAAQ,GACRP,aAAcqB,EAAMrB,aAAe,EACnCS,MAAOY,EAAMZ,MAAQ,EACrBP,MAAOmB,EAAMnB,MAAQ,IAGlB,2BACAmB,GADP,IAEIf,SAAU,GACVC,OAAQ,GACRN,eAAgBoB,EAAMpB,eAAiB,EACvCQ,MAAOY,EAAMZ,MAAQ,EACrBP,MAAOmB,EAAMnB,MAAQ,IAI1B,2BACAmB,GADP,IAEIf,SAAU6B,EACV5B,OAAQ0B,IAIhB,SAASI,EAAchB,EAAOP,GAE1B,IAAIiB,EAAOV,EAAMd,OAAOyB,QAAO,SAAClC,GAAD,OAAUA,EAAK/B,KAAO+C,KACjDqB,EAAed,EAAMf,SAAS4B,OAAOH,GACrCE,EAAaZ,EAAMd,OAAOyB,QAAO,SAAClC,GAAD,OAAUA,EAAK/B,KAAO+C,KAE3D,OAAO,2BACAO,GADP,IAEId,OAAQ0B,EACR3B,SAAU6B,I,UCxFHG,EARA,WACX,OACI,wBAAQvD,UAAU,SAAlB,SACI,uDCINwD,EAAa,CAACC,KAEdC,EAAQC,YACZC,YAAgB,CACdtC,cRPW,WAAyD,IAAhCgB,EAA+B,uDAAvB1D,EAAc2D,EAAS,uCACnE,OAAOA,EAAOjC,MACV,KAAK5B,EACD,OAAO,2BAAK4D,GAAZ,IAAmBzD,SAAS,IAChC,KAAKH,EACD,OAAO,2BAAK4D,GAAZ,IAAmBzD,SAAS,EAAOC,UAAWyD,EAAOR,UACzD,QAAS,OAAOO,IQEpBjB,UFGuB,WAAmC,IAAlCiB,EAAiC,uDAAzB1D,EAAc2D,EAAW,uCACzD,OAAQA,EAAOjC,MACX,KAAK3B,EACD,OAAO0D,EAAmBC,EAAOC,GACrC,KAAK5D,EACD,OAAOoE,EAAgBT,EAAOC,EAAOR,SACzC,KAAKpD,EACD,OAAO2E,EAAchB,EAAOC,EAAOR,SACvC,QACI,OAAOO,MEVjBuB,IAAe,WAAf,EAAmBL,IAGrBE,EAAM9B,STFsB,uCAAM,WAAQA,GAAR,iBAAAkC,EAAA,6DAC9BlC,EANO,CACHtB,KAAM5B,IAIoB,SAEPqF,MAAM,uCAFC,cAExBC,EAFwB,gBAGXA,EAASC,OAHE,OAGxBC,EAHwB,OAI9BtC,EAAS,CAAEtB,KAAM5B,EAAqBqD,QAASe,YAAQoB,KAJzB,2CAAN,uDSI5B,IASeC,EATI,WACjB,OACE,eAAC,IAAD,CAAUT,MAAOA,EAAjB,UACE,cAAC,EAAD,IACA,cAAC,EAAD,QCvBNU,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.4a04a35d.chunk.js","sourcesContent":["import { shuffle } from \"shufflr\";\n\nexport const types = {\n    SET_SENTENCES : \"SET_SENTENCES\",\n    GET_SENTENCES : \"GET_SENTENCES\"\n}\nexport const typesGame = {\n    INSERT_SENTENCES : \"INSERT_SENTENCES\",\n    NEXT_SENTENCES: \"NEXT_SENTENCES\",\n    ANSWER: \"ANSWER\",\n    QUESTION: \"QUESTION\"\n}\nexport const setSentences = () => {\n    return {\n        type: types.SET_SENTENCES\n    };\n};\n\nexport const getSentences = () => async ( dispatch ) => {\n    dispatch(setSentences());\n    const response = await fetch(\"http://localhost:8000/api/sentences\");\n    const data = await response.json();\n    dispatch({ type: types.GET_SENTENCES, payload: shuffle(data)});\n};","import { types } from \"./actions\"\n\nconst defaultState = {\n    loading: false,\n    sentences: [],\n}\n\nexport default function sentenceReducer(state = defaultState, action ) {\n    switch(action.type) {\n        case types.SET_SENTENCES:\n            return { ...state, loading: true};\n        case types.GET_SENTENCES:\n            return { ...state, loading: false, sentences: action.payload };\n        default: return state;\n    }\n}","import React, {useEffect, useState} from 'react'\nimport './AudioButton.css';\nconst AudioButton = ({id}) => {\n    const [ audioPlay, setAudioPlay ] = useState(true);\n    const [ audioPlayer, setAudioPlayer ] = useState(new Audio(`http://localhost:8000/api/audio/${id}`));\n\n    useEffect(() => {\n        setAudioPlayer(new Audio(`http://localhost:8000/api/audio/${id}`));\n        audioPlayer.load();\n        setAudioPlay(true);\n    // eslint-disable-next-line\n    }, [id])\n\n    const audio = () => {\n        if(audioPlay) {\n            audioPlayer.play();\n            setAudioPlay(false);\n            reload();\n        } else {\n            audioPlayer.pause();\n            setAudioPlay(true);\n        }\n    }\n    const reload = () => {\n        let time = audioPlayer.duration.toString().replace(\".\",\"\");\n        Number(time);\n        setTimeout(() => {\n            setAudioPlay(true);\n        }, time);\n    }\n    return (\n        <button className=\"button-game\" onClick={() => audio()}>{\">\"}</button>\n    );\n}\n\nexport default AudioButton;","import React from 'react'\nimport './Button.css';\n\nconst Button = ({letter, type, change}) => {\n    return(\n        <button\n            className=\"button\"\n            id={letter.id}\n            onClick={ e => change(e.target.id, type)}\n        >\n            {letter.letter}\n        </button>\n    );\n}\n\nexport default Button;","import React from 'react'\nimport Button from \"./Button\";\n\nconst ButtonList = ({WordList, AlternateLetter, Types}) => {\n    return (\n        <>\n            {\n                WordList.map((item) => {\n                        return (\n                            <Button\n                                key={item.id}\n                                letter={item}\n                                type={Types}\n                                change={AlternateLetter}\n                            />\n                        );\n                    }\n                )\n            }\n        </>\n    );\n}\n\nexport default ButtonList;","import React from 'react'\nimport './Counter.css';\n\nconst Counter = ({countCorrect, countIncorrect, count}) => {\n    return (\n        <div className=\"counter\">\n            <p>Correct: {countCorrect}</p>\n            <p>Incorrect: {countIncorrect}</p>\n            <p>Count: {count}</p>\n        </div>\n    );\n}\n\nexport default Counter;","import React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { typesGame } from \"../redux/actions\";\nimport AudioButton from \"./AudioButton\";\nimport ButtonList from \"./ButtonList\";\nimport Counter from \"./Counter\";\nimport './Game.css';\n\nconst Game = ({\n    insertSentence,\n    alternateLetter,\n    loaded,\n    sentences,\n    question,\n    answer,\n    index,\n    init,\n    countCorrect,\n    count,\n    countIncorrect\n}) => {\n\n    \n\n    useEffect(() => {\n        if (init) {\n            //Si el fetch en sentenceReducer está completo\n            insertSentence(sentences[index % sentences.length].sentence); //Carga la oración en gameState   \n            console.log(sentences[index % sentences.length].sentence)\n        }\n\n    }, [init, sentences, index, insertSentence]);\n\n    if (loaded) {\n        //Si la oración esta cargada en gameState, comienza.\n        return (\n            <div className=\"container\">  \n                <Counter count={count} countCorrect={countCorrect} countIncorrect={countIncorrect} />\n                <AudioButton id={sentences[index % sentences.length].id}/>\n\n                <div className=\"answer\">\n                    <ButtonList WordList={answer} AlternateLetter={alternateLetter} Types={typesGame.ANSWER}/>\n                </div>\n\n                <div className=\"question\">\n                    <ButtonList WordList={question} AlternateLetter={alternateLetter} Types={typesGame.QUESTION}/>\n                </div>\n            </div>\n        );\n    } else {\n        return <div>Loading....</div>;\n    }\n};\n\nconst mapStateToProps = ({ gameState, sentenceState }) => {\n    return {\n        sentences: sentenceState.sentences,\n        question: gameState.question,\n        answer: gameState.answer,\n        loaded: gameState.loaded,\n        index: gameState.index,\n        init: !sentenceState.loading,\n        countCorrect: gameState.countCorrect,\n        countIncorrect: gameState.countIncorrect,\n        count: gameState.count\n    };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        insertSentence: (sentence) =>\n            dispatch({\n                type: typesGame.INSERT_SENTENCES,\n                payload: sentence,\n            }),\n        alternateLetter: (id, type) =>\n            dispatch({\n                type: type,\n                payload: id,\n            }),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);\n","import { typesGame } from \"./actions\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { shuffle } from \"shufflr\";\n/* --------------------------------------------------   State   -------------------------------------------------- */\n\nconst defaultState = {\n    loaded: false,\n    index: 0,\n    question: [],\n    answer: [],\n    answerCorrect: \"\",\n    countCorrect: 0,\n    countIncorrect: 0,\n    count: 0\n};\n\n/* --------------------------------------------------   Reducer   -------------------------------------------------- */\n\nexport const gameReducer = (state = defaultState, action) => {\n    switch (action.type) {\n        case typesGame.INSERT_SENTENCES:\n            return createSentenceList(state, action);\n        case typesGame.QUESTION:\n            return questionLetters(state, action.payload);\n        case typesGame.ANSWER:\n            return answerLetters(state, action.payload);\n        default:\n            return state;\n    }\n};\n\n/* --------------------------------------------------   Functions   -------------------------------------------------- */\n\nfunction createSentenceList(state, action) {\n    //Pasa la oración recibida a una lista en el state.\n    const tempSentence = action.payload.split(\" \");\n    let tempList = [];\n\n    for (let i of tempSentence) {\n        tempList.push({\n            id: uuidv4(),\n            letter: i,\n        });\n    }\n\n    tempList = shuffle(tempList); //Desordena la lista\n\n    return {\n        ...state,\n        loaded: true,\n        question: tempList,\n        answerCorrect: action.payload\n    };\n}\n\nfunction questionLetters(state, payload) {\n    //Mueve la letra de la lista question a answer en el state.\n    let temp = state.question.filter((item) => item.id === payload);\n    let answerTemp = state.answer.concat(temp);\n    let questionTemp = state.question.filter((item) => item.id !== payload);\n\n    if(questionTemp.length === 0) {\n        temp = answerTemp.map( (item) => item.letter).join(\" \");\n        if(temp === state.answerCorrect) {\n            return {\n                ...state,\n                question: [],\n                answer: [],\n                countCorrect: state.countCorrect + 1,\n                index: state.index + 1,\n                count: state.count + 1\n            }\n        } else {\n            return {\n                ...state,\n                question: [],\n                answer: [],\n                countIncorrect: state.countIncorrect + 1,\n                index: state.index + 1,\n                count: state.count + 1\n            }\n        }\n    } \n    return {\n        ...state,\n        question: questionTemp,\n        answer: answerTemp,\n    };\n}\n\nfunction answerLetters(state, payload) {\n    //Mueve la letra de la lista answer a question en el state.\n    let temp = state.answer.filter((item) => item.id === payload);\n    let questionTemp = state.question.concat(temp);\n    let answerTemp = state.answer.filter((item) => item.id !== payload);\n\n    return {\n        ...state,\n        answer: answerTemp,\n        question: questionTemp,\n    };\n}\n","import React from 'react'\nimport './Header.css';\n\nconst Header = () => {\n    return (\n        <header className=\"header\">\n            <h1>SentenceChanllenge</h1>\n        </header>\n    );\n}\n\nexport default Header;","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { applyMiddleware, combineReducers, createStore } from 'redux';\nimport thunk from 'redux-thunk';\nimport sentenceReducer from './redux/sentenceReducer';\nimport { getSentences } from './redux/actions';\nimport Game from './components/Game';\nimport { gameReducer } from './redux/gameReducer';\nimport Header from './components/Header';\n\nconst middleware = [thunk];\n\nconst store = createStore(\n  combineReducers({\n    sentenceState: sentenceReducer,\n    gameState: gameReducer\n  }),\n  applyMiddleware(...middleware)\n);\n\nstore.dispatch(getSentences());\n\nconst GameLayout = () => {\n  return (\n    <Provider store={store}>\n      <Header />\n      <Game />\n    </Provider>\n  );\n}\n\nexport default GameLayout;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GameLayout from './game/GameLayout';\nReactDOM.render(\n  <React.StrictMode>\n    <GameLayout />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}